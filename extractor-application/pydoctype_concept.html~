<!doctype html>
<html>
  <head>
     <meta charset="utf-8">
     <title>pydoctype concept prototype</title>
     <script type="text/javascript"
             src="http://rangy.googlecode.com/svn/trunk/dev/rangy-core.js">
        <!-- http://code.google.com/p/rangy/wiki/DocumentationHome -->
     </script>
     <script type="text/javascript"
             src="http://code.jquery.com/jquery-2.1.0.js">
     </script>
     <script>
        function classify_selection(ev) {
           var sel = rangy.getSelection();
           var selected_text = sel.toString();
           var selected_html = sel.toHtml();
           var type_id = $(this).attr("id");
           var newentry = "<li thetype='" + type_id + "'>" +
                          "<div class='text'>" + selected_text + "</div>" +
                          "<div class='html'>" + selected_html + "</div>" +
                          "</li>";
           $("#result").append(newentry);
        }
        $(document).ready(function() {
           rangy.init();
           $("#thebuttons li").mousedown(classify_selection);
        });
     </script>
  </head>
  <body>
    <h1>pydoctype concept prototype</h1>
    <p>Some text before the documentation here.</p>
    <hr />
    <div id="thedocumentation">
       <dl class="class">
          <dt id="dict">
             <em class="property">class </em><tt class="descname">dict</tt><big>(</big><em>**kwarg</em><big>)</big><a
                  class="headerlink" href="#dict"
                  title="Permalink to this definition">ּ/a></dt>
          <dt>
             <em class="property">class </em><tt class="descname">dict</tt><big>(</big><em>mapping</em>,
             <em>**kwarg</em><big>)</big></dt>
          <dt>
             <em class="property">class </em><tt class="descname">dict</tt><big>(</big><em>iterable</em>,
             <em>**kwarg</em><big>)</big></dt>
          <dd><p>Return a new dictionary initialized from an optional positional
             argument
             and a possibly empty set of keyword arguments.</p>

             <p>If no positional argument is given, an empty dictionary is
                created.
                If a positional argument is given and it is a mapping object, a
                dictionary
                is created with the same key-value pairs as the mapping object.
                Otherwise,
                the positional argument must be an <a class="reference internal"
                                                      href="../glossary.html#term-iterator"><em
                        class="xref std std-term">iterator</em></a> object. Each
                item in
                the iterable must itself be an iterator with exactly two
                objects. The
                first object of each item becomes a key in the new dictionary,
                and the
                second object the corresponding value. If a key occurs more than
                once, the
                last value for that key becomes the corresponding value in the
                new
                dictionary.</p>

             <p>If keyword arguments are given, the keyword arguments and their
                values are
                added to the dictionary created from the positional argument. If
                a key
                being added is already present, the value from the keyword
                argument
                replaces the value from the positional argument.</p>

             <p>To illustrate, the following examples all return a dictionary
                equal to
                <tt class="docutils literal"><span
                        class="pre">{&quot;one&quot;:</span> <span class="pre">1,</span>
                   <span class="pre">&quot;two&quot;:</span> <span class="pre">2,</span>
                   <span class="pre">&quot;three&quot;:</span> <span
                           class="pre">3}</span></tt>:</p>

             <div class="highlight-python3">
                <div class="highlight"><pre><span
                        class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span
                        class="o">=</span> <span class="nb">dict</span><span
                        class="p">(</span><span class="n">one</span><span
                        class="o">=</span><span class="mi">1</span><span
                        class="p">,</span> <span class="n">two</span><span
                        class="o">=</span><span class="mi">2</span><span
                        class="p">,</span> <span class="n">three</span><span
                        class="o">=</span><span class="mi">3</span><span
                        class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">b</span> <span
                           class="o">=</span> <span class="p">{</span><span
                           class="s">&#39;one&#39;</span><span
                           class="p">:</span> <span class="mi">1</span><span
                           class="p">,</span> <span
                           class="s">&#39;two&#39;</span><span
                           class="p">:</span> <span class="mi">2</span><span
                           class="p">,</span> <span
                           class="s">&#39;three&#39;</span><span
                           class="p">:</span> <span class="mi">3</span><span
                           class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span> <span
                           class="o">=</span> <span class="nb">dict</span><span
                           class="p">(</span><span class="nb">zip</span><span
                           class="p">([</span><span
                           class="s">&#39;one&#39;</span><span
                           class="p">,</span> <span
                           class="s">&#39;two&#39;</span><span
                           class="p">,</span> <span
                           class="s">&#39;three&#39;</span><span
                           class="p">],</span> <span class="p">[</span><span
                           class="mi">1</span><span class="p">,</span> <span
                           class="mi">2</span><span class="p">,</span> <span
                           class="mi">3</span><span class="p">]))</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">d</span> <span
                           class="o">=</span> <span class="nb">dict</span><span
                           class="p">([(</span><span
                           class="s">&#39;two&#39;</span><span
                           class="p">,</span> <span class="mi">2</span><span
                           class="p">),</span> <span class="p">(</span><span
                           class="s">&#39;one&#39;</span><span
                           class="p">,</span> <span class="mi">1</span><span
                           class="p">),</span> <span class="p">(</span><span
                           class="s">&#39;three&#39;</span><span
                           class="p">,</span> <span class="mi">3</span><span
                           class="p">)])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">e</span> <span
                           class="o">=</span> <span class="nb">dict</span><span
                           class="p">({</span><span
                           class="s">&#39;three&#39;</span><span
                           class="p">:</span> <span class="mi">3</span><span
                           class="p">,</span> <span
                           class="s">&#39;one&#39;</span><span
                           class="p">:</span> <span class="mi">1</span><span
                           class="p">,</span> <span
                           class="s">&#39;two&#39;</span><span
                           class="p">:</span> <span class="mi">2</span><span
                           class="p">})</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">a</span> <span
                           class="o">==</span> <span class="n">b</span> <span
                           class="o">==</span> <span class="n">c</span> <span
                           class="o">==</span> <span class="n">d</span> <span
                           class="o">==</span> <span class="n">e</span>
<span class="go">True</span>
</pre>
                </div>
             </div>
             <p>Providing keyword arguments as in the first example only works
                for keys that
                are valid Python identifiers. Otherwise, any valid keys can be
                used.</p>

             <p>These are the operations that dictionaries support (and
                therefore, custom
                mapping types should support too):</p>
    </div>
    <hr />

  <p>Some text after the documentation.</p>
  <ul id="thebuttons">
     <li id="v">vanille</li>
     <li id="e">erdbeer</li>
     <li id="s">schoko</li>
  </ul>
  <hr />
  <ol id="result">

  </ol>
  <hr />

  </body>
</html>
